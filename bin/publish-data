#!/bin/bash -e

function usage() {
cat << EOF
usage: $0 <site.env>
examples:
    $0 k8s/planet.env

Use an upload prefix other than what's in bin/_headway_version.sh
    HEADWAY_DATA_TAG=dev $0 k8s/planet.env
    HEADWAY_DATA_TAG=dev $0 k8s/seattle.env
EOF
}

if [ ! $# -eq 1 ]; then
    usage
    exit 1
fi


REPO_ROOT=$(git rev-parse --show-toplevel)
DATA_ROOT="${REPO_ROOT}/data"

upload_pids=()
function kill_uploads() {
    echo "Killing any in-progress uploads before exiting"
    for pid in ${upload_pids[*]}; do
        kill "${pid[*]}"
    done
}

trap kill_uploads EXIT

function upload() {
  INPUT=$1
  OUTPUT_PREFIX=$2

  RESOURCE="${OUTPUT_PREFIX}/$(basename $INPUT)"
  BUCKET=$HEADWAY_S3_BUCKET

  INPUT_PATH="${DATA_ROOT}/${INPUT}"
  if [ ! -f "$INPUT_PATH" ]; then
      echo "target file doesn't exist: '${INPUT_PATH}'"
      exit 1;
  fi

  # I'm seeing much faster uploads with the openstack swift client vs the aws cli
  # Plus, my host seems to be pretty flaky with large uploads via the `aws s3` cli.
  #
  # Note you'll need to be authenticated to run this.
  #   e.g. (source ~/openrc.sh && bin/publish-data)
  echo "Uploading ${INPUT_PATH} -> s3://${BUCKET}/${RESOURCE}"
  swift upload --segment-size=5G --skip-identical "$BUCKET" "$INPUT_PATH" --object-name="$RESOURCE" & upload_pids+=($!)
}

source "${REPO_ROOT}/.env"

# stash env vars in local before they get clobbered by _headway_version.sh
local_container_tag=$HEADWAY_CONTAINER_TAG
local_data_tag=$HEADWAY_DATA_TAG
source "${REPO_ROOT}/bin/_headway_version.sh"

if [ ! -z "$HEADWAY_TAG" ]; then
    HEADWAY_CONTAINER_TAG="$HEADWAY_TAG"
    HEADWAY_DATA_TAG="$HEADWAY_TAG"
fi

export HEADWAY_CONTAINER_TAG="${local_container_tag:-$HEADWAY_CONTAINER_TAG}"
export HEADWAY_DATA_TAG="${local_data_tag:-$HEADWAY_DATA_TAG}"

DEPLOYMENT_ENV_FILE="$1"
source "$DEPLOYMENT_ENV_FILE"

set -o nounset

upload "${HEADWAY_AREA}.valhalla.tar.zst"      "${HEADWAY_DATA_TAG}/${HEADWAY_AREA_TAG}"
upload "${HEADWAY_AREA}.elasticsearch.tar.zst" "${HEADWAY_DATA_TAG}/${HEADWAY_AREA_TAG}"
upload "${HEADWAY_AREA}.mbtiles"               "${HEADWAY_DATA_TAG}/${HEADWAY_AREA_TAG}"
upload "${HEADWAY_AREA}.placeholder.tar.zst"   "${HEADWAY_DATA_TAG}/${HEADWAY_AREA_TAG}"
upload "${HEADWAY_AREA}.osm.pbf"               "${HEADWAY_DATA_TAG}/${HEADWAY_AREA_TAG}"

for TRANSIT_AREA in $HEADWAY_TRANSIT_AREAS; do

upload "${TRANSIT_AREA}.graph.obj.zst" "${HEADWAY_DATA_TAG}/${HEADWAY_AREA_TAG}"
upload "${TRANSIT_AREA}.gtfs.tar.zst"  "${HEADWAY_DATA_TAG}/${HEADWAY_AREA_TAG}"

done

# These files are generic across all areas
upload natural_earth.mbtiles          "${HEADWAY_DATA_TAG}"

rets=()
for pid in ${upload_pids[*]}; do
  wait $pid
  status=$?
  rets+=($status)
  if [ ! $status ]; then
    echo "error in upload"
    exit $status
  fi
done

echo "Return codes: ${rets[*]}"
