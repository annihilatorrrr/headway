#!/bin/bash

set -e

REPO_ROOT=$(git rev-parse --show-toplevel)

function usage() {
cat << EOF
usage: $0 <env-file>
examples:
    $0 seattle.env

Use a release other than what's in bin/_headway_version.sh
    HEADWAY_VERSION=latest $0 seattle.env
    HEADWAY_VERSION=0.1.0 $0 planet.env
EOF
}

if [ ! $# -eq 1 ]; then
    usage
    exit 1
fi

source "${REPO_ROOT}/.env"

DEPLOYMENT_ENV_FILE="$1"
source "$DEPLOYMENT_ENV_FILE"

if [ -z "${HEADWAY_VERSION}" ]
then
    source "${REPO_ROOT}/bin/_headway_version.sh"
fi

if [ -z "${ASSET_VERSION}" ]
then
    export ASSET_VERSION="${HEADWAY_VERSION}"
fi

PELIAS_CONFIG_FILE="${REPO_ROOT}/data/${HEADWAY_AREA}.pelias.json"
if [ ! -f "$PELIAS_CONFIG_FILE" ]; then
    echo "Missing pelias config file: ${PELIAS_CONFIG_FILE}"
    exit 1
fi
PELIAS_CONFIG_JSON=$(cat $PELIAS_CONFIG_FILE)

indent4() { while IFS= read -r line; do printf '    %s\n' "$line"; done; }
export PELIAS_CONFIG_JSON_YAML="|
$(echo "$PELIAS_CONFIG_JSON" | indent4)"

set -o nounset

OUTPUT_DIR="${HEADWAY_AREA_TAG}-hw-${HEADWAY_VERSION}"
mkdir -p "$OUTPUT_DIR"
rm -f "${OUTPUT_DIR}"/*

for file in _template/*.tpl
do
    if [[ $file =~ opentripplanner-deployment && "$HEADWAY_ENABLE_TRANSIT_ROUTING" == 0 ]]; then
        echo "skipping transit routing deployment"
        # NOTE: we *do* want to copy the OTP *service* definition, otherwise
        # our nginx frontend will fail to start up due to the inability to
        # resolve DNS for the OTP proxy. A better solution might be to remove
        # the OTP section altogether when transit routing is disabled, but
        # that's beyond the capabilities of the simple envsubst we're using.
        # For now then, we copy in the service defintion.
        continue
    fi
    output=$(basename $file | sed 's/.tpl$//')
    echo $output
    envsubst < "$file" > "$OUTPUT_DIR/$output"
done


